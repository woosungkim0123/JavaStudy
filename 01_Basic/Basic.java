public class Basic {
    public static void main(String[] args) {
        // 자바 등장 전 사람이 직접 메모리 관리 => 메모리 사용 후 반환하지 않아서 메모리 부족으로 프로그램 사망
        // 자바에는 가비지 컬렉터(GC)가 있어서 메모리를 자동으로 정리

        // 멀티 스레드 지원(하나의 프로그램에 동시에 여러 작업 가능)

        // 운영체제에 독립적
        // VM : 가상 컴퓨터, 실제 컴퓨터가 아니라 소프트웨어로 만들어진 컴퓨터
        // 자바프로그램이 실행되는 가상 컴퓨터(JVM)
        // 일반 어플리케이션은 OS(운영체제)에서 실행되지만 자바는 JVM 위에서 실행되기 때문에 OS와 독립적일 수 있음

        // 패키지 : 관련된 클래스들을 모아둔 것
        // JDK : Java Development Kit
        // 자바를 이용해서 프로그램을 개발할 때 사용하는 여러 도구들을 모아서 제공하는 개발자용 버전 자바

        // javac : 자바파일을 컴파일
        // 환경변수를 설정하면 컴퓨터가 실행파일을 찾을때 현재 디렉토리에 없으면 환경변수에 등록된 제일 위 경로부터 순서대로 찾음
        // 만약 환경변수가 없으면 터미널에서 c:/javac위치/javac 클래스명.java

        // 컴파일러인 javac가 hello.java를 읽어서 jvm이 이해할 수 있는 기계어로 변환
        // type Hello.class를 입력해서 확인해보면 사람이 알아 볼 수 없는 언어로 된 것을 알 수 있다(바이너리 파일 or 이진파일)
        // hello.java처럼 사람이 알아볼 수 있는 파일을 텍스트 파일
        // 실행하려면 java Hello(class이름), 이때는 확장자를 붙이지 않음

        // 변수
        // 하나의 값을 저장할 수 있는 메모리 공간
        // 원래 메모리의 값을 저장하거나 읽을 때 메모리 주소를 이용해야 하지만 메모리 주소는 숫자라서 사람이 기억하기 힘들고 불편함
        // 그래서 특정 메모리 영역에 이름을 붙이고 주소 대신에 이름을 이용해서 메모리의 값을 저장하고 읽을 수 있게 한 것이 변수
        // 변수는 단 하나의 값만 저장할 수 있기 때문에 변수에 새로운 값을 저장하면 기존 저장 값은 지워지고 새로 저장한 값만 남게됨

        // 메모리에 값을 저장하려면 먼저 변수를 선언해야 한다.
        // 선언 이유 : 값(data)을 저장할 공간을 마련하기 위해
        int age;
        age = 25;

        int age1 = 30;
        int x = 3, y = 4;

        // 선언된 변수에 처음으로 값을 저장하는 것을 변수 초기화
        // 모든 변수는 사용하기전 적절한 값으로 초기화 하는 것이 좋다
        // 메모리는 여러 프로그램이 함께 공유하는 자원임으로 사용하기 전에 새로운 값을 저장함으로써
        // 기존의 저장되어 있는 알 수 없는 값을 지우는 것이 바로 초기화

        // 상수(constant) : 한번만 값을 저장 가능한 변수
        final int score = 100;
        // score = 200; 에러

        // 리터럴 : 값을 의미
        // score1은 변수, 100은 리터럴
        int score1 = 100;

        // 접미사
        // 정수형과 실수형은 타입이 여러개라서 접미사를 붙여서 구분, 대소문자 구별안함
        // byte와 short 타입의 경우 리터럴이 없어서 byte 타입의 변수에 값을 저장하면 integer type의 리터럴을 사용
        // 정수형에 L이 붙어있으면 long타입
        long a = 100L;

        // float는 f, double은 d(생략가능)
        float b = 1.4f;
        double c = 3.14d; // d 생략가능

        // byte 범위 : -128 ~ 127
        // int 타입의 최대값이 대략 20억
        // 20억이 넘는 값은 long 타입에 담아야 함
        // long 타입 변수에 값을 저장할 때 int 타입의 리터럴을 써도 되기 때문에 접미사를 붙이건
        // 안 붙이건 상관없지만 대부분 int 타입의 최대값인 20억을 넘는 값이기 때문에 반드시 접미사 L을 붙여야한다.

        long d = 10_000_000_000L; // 100억 (L 안붙이면 에러)
        long e = 100;

        // 10진법 외에 다른 진법으로도 표현 가능
        // 접미사 처럼 접두사도 대소문자 구별 X
        int i = 100; // 10진수
        int oct = 0100; // 접두사 0이 붙으면 8진수
        int hex = 0x100; // 0x가 붙으면 16진수
        int bin = 0b0101; // 접두 0b가 붙으면 2진수

        // 둘다 모두 실수형 리터럴이고 접미사가 없으니 double타입 리터럴이다.
        double f = 10.; // 10.0에서 0이 생략된 것
        double g = .10; // 0.10에서 앞에 0이 생략된 것

        // 실수형 접미사 => 실수형 리터럴
        float h = 10f; // 10.0f와 의미가 같음.

        // e : 10^n
        double j = 1e3; // 10^3 = 1000, 기호 e는 실수형에 사용되는 것이기 때문에 1000.0, double 타입

        // 변수에 저장할 리터럴의 타입은 변수의 타입과 일치하는 것이 일반적, 반드시 일치해야 하는 것은 아님
        // 범위가 변수(담을 그릇) > 리터럴(물건) 인 경우, OK
        int k = 'A';
        // integer 타입의 변수 k에 문자 A가 저장되는 것이 아닌 문자 A의 문자코드인 65가 저장
        // 저장하려는 리터럴의 타입이 char 타입이지만 변수의 타입이 int 라서 저장범위가 넓어서 가능

        long l = 123; // long > int
        double m = 3.14f; // double > float
        // long n = 3.14f; 에러
        // long: 8byte, float : 4byte 라서 될 것 같지만 실수형은 정수형보다 저장범위가 넓음

        // String
        // String은 자바에서 제공하는 클래스
        // 자주 사용하기 때문에 String 클래스만 특별하게 기본형 변수에 값을 저장하는 것과 같은 표현을 허용함

        String n = "AB";
        String o = new String("AB"); // 원래 형태
        // 원래 참조변수 n에는 문자열 AB의 주소가 저장되는데 단순히 변수 n에 문자열 AB가 저장된다고 생각해도 됨
        // 두 문장의 약간의 차이가 있음

        String p = ""; // 빈 문자열
        // char q = ''; 에러
        String r = "A" + "B"; // "AB"

        // "" + 7 -> "7" (숫자 -> 문자열 변환)
        // 주의점은 문자열 결합은 왼쪽에서 오른쪽으로 진행 => 순서에 따라 다른 결과
        // "" + 7 + 7 => "7" + 7 => "77"
        // 7 + 7 + "" => "14"

        // 문자열 + any type → 문자열
        // any type + 문자열 → 문자열

    }
}
