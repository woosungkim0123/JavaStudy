package d_oop;

import d_oop.common.Tv;

public class A_OOP {
    public static void main(String[] args) {
        /*
        객체지향언어(Object Oriented Programing) = 프로그래밍 언어 + 객체지향개념(규칙)

        코드 재사용성 높음, 유지보수 용이, 중복코드 제거
        4가지 특징 : 캡슐화, 상속, 추상화, 다형성(제일 중요)

        클래스
        정의 : 객체를 정의해 놓은 것
        용도 : 객체를 생성하는데 사용
        예 : 제품설계도(TV 설계도)

        객체
        정의 : 실제로 존재하는 것. 사물 또는 개념
        용도 : 객체가 가지고 있는 기능과 속성에 따라 다름
        예 : 제품(TV)

        TV는 왜 만듬? 사용하려고.
        TV설계도는 왜 만듬? TV설계도를 한번 만들어두면 TV를 쉽게 만들 수 있음

        객체지향 : 실제 세계(world)를 어떻게 컴퓨터 안에 옮겨 놓을까를 고민하다 나온 개념
        HW(하드웨어(실제 세계))를 SW(소프트웨어)화 하기 위한 개념

        객체 = 속성(변수) + 기능(메서드)
        속성 : 크기, 길이, 높이 ,색상, 볼륨 등
        기능 : 켜기, 끄기, 볼륨 높이기, 볼륨 낮추기 등

        객체와 인스턴스 (둘 다 거의 비슷한 용어)
        객체 : 모든 인스턴스를 대표하는 일반적 용어
        인스턴스 : 특정 클래스로부터 생성된 객체(예 : TV 인스턴스)

        TV 클래스로 부터 만들어진 객체를 TV 인스턴스라고 함
        클래스 (설계도) --- 인스턴스화 ---> 인스턴스(객체) (제품)
        클래스(설계도)를 만들었으면 따로 인스턴스(제품)을 만들어야 사용할 수 있다는 점
        */

        Tv t; // 참조변수(리모콘), TV 클래스 타입의 참조변수 t를 선언
        t = new Tv(); // TV 인스턴스 생성 후 생성된 TV 인스턴스의 주소를 t에 저장
        // Tv2 t = new Tv2(); 한 문장으로 가능
        t.channel = 7;
        t.channelUp(); // 참조변수가 가리키는 메서드를 호출(메서드 사용)
        System.out.println("현재 채널은 " + t.channel + " 입니다.");

        /*
        Tv2(참조형 타입) b(변수)= new Tv2();
        객체가 만들어지면 메모리 어딘가에 만들어지는데 그 주소를 변수에 넣은 것
        = 대입 : Tv와 리모콘을 연결. 참조변수와 객체가 연결되어 있는 것을 화살표로 표현함
        t = 메모리주소(0x100)  ----> 0x100
                                color : null
                                power : false
                                channel : 0
                                power()
                                ...

        Tv객체를 다룰 때 반드시 t(리모콘)을 통해서만 다룰 수 있음. 리모콘 없이 객체만 다룰 수 있는 방법은 존재하지 않음
        Tv객체니까 Tv리모콘이 필요하고 그래서 참조변수의 타입이 Tv2
        객체를 두개 만들면 객체마다 별도의 저장공간이 생김
        */

        // 객체 배열
        // 객체 배열 == 참조변수 배열
        Tv[] tvArr = new Tv[3];
        tvArr[0] = new Tv();
        tvArr[1] = new Tv();
        tvArr[2] = new Tv();
        // 간단히 바꾸면 Tv2[] tv2Arr = { new Tv2(), new Tv2(), new Tv2()};
        // 객체 배열은 단순히 참조변수 배열이기 때문에 안에 객체를 만들어서 채워넣어줘야함 (주의)

        /*
        일반적으로 하나의 소스파일에 하나의 클래스만 작성하는 것이 보통
        하나의 소스파일에 여러 클래스 작성할 수도 있음
        Hello.java 파일이 있는데 거기 class Hello2와 class Hello3가 있다.
        public 클래스가 있는 경우 public 클래스 이름과 파일이름이 일치해야함
        public 클래스가 없는 경우 소스 파일의 이름은 Hello2.java, Hello3.java 둘다 가능하다
        하나의 소스파일에 둘 이상의 public 클래스가 존재하면 안된다.
        */
    }
}